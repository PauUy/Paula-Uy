<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - PersonalPortfolio</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/PersonalPortfolio.styles.css" asp-append-version="true" />
    
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light">
            <div class="container">
                <a class="navbar-brand" asp-area="" asp-page="/Index">Paula</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                @if (!ViewData.ContainsKey("HideNav") || !(ViewData["HideNav"] is bool hideNav && hideNav))
                {
                    <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                        <ul class="navbar-nav ms-auto">
                            <li class="nav-item">
                                <a class="nav-link" href="#home">Home</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#about">About</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#tools">Tools</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#projects">Projects</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#contact">Contacts</a>
                            </li>
                        </ul>
                    </div>
                }
            </div>
        </nav>
    </header>




    <div class="container position-relative">
        <img src="/images/stargif.gif" alt="star gf" class="stargifdesign" />
        <img src="/images/moonunicorncatgif.gif" alt="cat moon gif" class="catimage1" />
        <img src="/images//sleepingcatsgif.gif" alt="sleeping cat gif" class="catimage2" />
        <main role="main" class="pb-3">
            @RenderBody()
        
        </main>
    </div>

    <footer class="border-top footer pastel-gradient-footer text-muted">
        <div class="container">
            &copy; 2024 - Paula Uy - <a asp-area="" asp-page="/Privacy">Privacy</a>
        </div>
    </footer>


    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

  
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const fadeInElements = document.querySelectorAll('.fade-in');

            // Function to check if the element is in view
            function isInView(el) {
                const rect = el.getBoundingClientRect();
                return rect.top <= window.innerHeight && rect.bottom >= 0;
            }

            // Function to handle scroll and toggle fade-in/fade-out
            function handleScroll() {
                fadeInElements.forEach(el => {
                    if (isInView(el)) {
                        el.classList.add('scroll-visible'); // Fade in when in view
                    } else {
                        el.classList.remove('scroll-visible'); // Fade out when out of view
                    }
                });
            }

            // Trigger animation on scroll
            window.addEventListener('scroll', handleScroll);
            // Initial check if already in view
            handleScroll();

            // Floating circles script
            // const circles = document.querySelectorAll('.circle');

            // circles.forEach(circle => {
            //     // Randomize position
            //     circle.style.top = Math.random() * (window.innerHeight - 100) + 'px'; // Subtracting circle height
            //     circle.style.left = Math.random() * (window.innerWidth - 100) + 'px'; // Subtracting circle width

            //     // Set pointer-events to auto for circle interaction
            //     circle.style.pointerEvents = 'auto';

            //     // Add a floating animation
            //     const float = () => {
            //         const randomX = Math.random() * (window.innerWidth - 100);
            //         const randomY = Math.random() * (window.innerHeight - 100);
            //         circle.style.transition = 'all 2s ease'; // Smooth transition
            //         circle.style.left = randomX + 'px';
            //         circle.style.top = randomY + 'px';
            //     };

            //     setInterval(float, 3000); // Change position every 3 seconds
            // });
        });

        const images = [
            "/images/pix3.jpg",
            "/images/pix2.jpg",
      
        ];

        let currentImageIndex = 0;
        const slideshowElement = document.getElementById('slideshow');

        function changeImage() {
            currentImageIndex = (currentImageIndex + 1) % images.length;
            slideshowElement.src = images[currentImageIndex];
        }

        setInterval(changeImage, 3000);

        // Function to check if an element is in the viewport
        function isElementInViewport(el) {
            const rect = el.getBoundingClientRect();
            return (
                rect.top >= 0 &&
                rect.left >= 0 &&
                rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
                rect.right <= (window.innerWidth || document.documentElement.clientWidth)
            );
        }

        // Function to check all cards and add the 'show' class with a delay
        function checkCardsInView() {
            const cards = document.querySelectorAll('.card-animation');
            let delay = 0; // Initial delay for each card

            cards.forEach((card, index) => {
                if (isElementInViewport(card)) {
                    // Add a delay between each card's appearance
                    setTimeout(() => {
                        card.classList.add('show');
                    }, delay);

                    // Increase delay for the next card
                    delay += 200; // Adjust delay (in milliseconds) for sequential animation
                } else {
                    // Remove 'show' class if the card is out of view
                    card.classList.remove('show');
                }
            });
        }

        // Run the function on scroll and on page load
        window.addEventListener('scroll', checkCardsInView);
        window.addEventListener('load', checkCardsInView);  
    </script>
</body>
</html>
